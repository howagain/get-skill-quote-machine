{"version":3,"sources":["colorsArray.js","App.js","serviceWorker.js","index.js"],"names":["COLORS_ARRAY","quoteDBUrl","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","accentColor","setAccentColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","color","icon","faQuoteLeft","href","encodeURI","faTwitter","onClick","randomInteger","Math","floor","length","random","getRandomQuote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAkQeA,G,MAlQM,CACnuBCvPEC,EAAa,yIAkDFC,MA/Cf,WAAgB,IAAD,EACaC,mBAAS,gEADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,oBAFxB,mBAENG,EAFM,KAEEC,EAFF,OAG2BJ,mBAAS,GAHpC,mBAGQK,GAHR,aAIyBL,mBAAS,MAJlC,mBAINM,EAJM,KAIOC,EAJP,OAKyBP,mBAAS,WALlC,mBAKNQ,EALM,KAKOC,EALP,KAOPC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAC1BC,QAAQC,IAAIH,GAJM,2CAAH,sDAmBjB,OAZAI,qBAAU,WACRV,EAAYZ,KACX,CAACA,IAWF,yBAAKuB,UAAU,OACb,4BAAQA,UAAU,aAAaC,MAAO,CAAEC,gBAAiBf,IACvD,yBAAKgB,GAAG,YAAYF,MAAO,CAAEG,MAAOjB,IAClC,wBAAIgB,GAAG,QACL,0BAAMA,GAAG,cAAa,kBAAC,IAAD,CAAiBE,KAAMC,OAAsB1B,EADrE,KAGA,uBAAGuB,GAAG,UAAN,KAAkBrB,GAClB,yBAAKkB,UAAU,WACb,uBAAGG,GAAG,cAAcF,MAAO,CAAEC,gBAAiBf,GAAeoB,KAAMC,UAAU,4CAAD,OAA6C5B,EAA7C,aAAuDE,KAAW,kBAAC,IAAD,CAAiBuB,KAAMI,OACrK,4BAAQN,GAAG,YAAYF,MAAO,CAAEC,gBAAiBf,GAAeuB,QAAS,kBAlB5D,WACrB,IAAIC,EAAgBC,KAAKC,MAAM5B,EAAY6B,OAASF,KAAKG,UACzD/B,EAAgB2B,GAChBvB,EAAeZ,EAAamC,IAC5B9B,EAASI,EAAY0B,GAAe/B,OACpCG,EAAUE,EAAY0B,GAAe7B,QAakDkC,KAA/E,gCCnCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.22e95f47.chunk.js","sourcesContent":["const COLORS_ARRAY = [\r\n  '#F44336',\r\n  '#FFEBEE',\r\n  '#FFCDD2',\r\n  '#EF9A9A',\r\n  '#E57373',\r\n  '#EF5350',\r\n  '#E53935',\r\n  '#D32F2F',\r\n  '#C62828',\r\n  '#B71C1C',\r\n  '#FF8A80',\r\n  '#FF5252',\r\n  '#FF1744',\r\n  '#D50000',\r\n  '#FCE4EC',\r\n  '#F8BBD0',\r\n  '#F48FB1',\r\n  '#F06292',\r\n  '#EC407A',\r\n  '#E91E63',\r\n  '#D81B60',\r\n  '#C2185B',\r\n  '#AD1457',\r\n  '#880E4F',\r\n  '#FF80AB',\r\n  '#FF4081',\r\n  '#F50057',\r\n  '#C51162',\r\n  '#F3E5F5',\r\n  '#E1BEE7',\r\n  '#CE93D8',\r\n  '#BA68C8',\r\n  '#AB47BC',\r\n  '#9C27B0',\r\n  '#8E24AA',\r\n  '#7B1FA2',\r\n  '#6A1B9A',\r\n  '#4A148C',\r\n  '#EA80FC',\r\n  '#E040FB',\r\n  '#D500F9',\r\n  '#AA00FF',\r\n  '#EDE7F6',\r\n  '#D1C4E9',\r\n  '#B39DDB',\r\n  '#9575CD',\r\n  '#7E57C2',\r\n  '#673AB7',\r\n  '#5E35B1',\r\n  '#512DA8',\r\n  '#4527A0',\r\n  '#311B92',\r\n  '#B388FF',\r\n  '#7C4DFF',\r\n  '#651FFF',\r\n  '#6200EA',\r\n  '#E8EAF6',\r\n  '#C5CAE9',\r\n  '#9FA8DA',\r\n  '#7986CB',\r\n  '#5C6BC0',\r\n  '#3F51B5',\r\n  '#3949AB',\r\n  '#303F9F',\r\n  '#283593',\r\n  '#1A237E',\r\n  '#8C9EFF',\r\n  '#536DFE',\r\n  '#3D5AFE',\r\n  '#304FFE',\r\n  '#E3F2FD',\r\n  '#BBDEFB',\r\n  '#90CAF9',\r\n  '#64B5F6',\r\n  '#42A5F5',\r\n  '#2196F3',\r\n  '#1E88E5',\r\n  '#1976D2',\r\n  '#1565C0',\r\n  '#0D47A1',\r\n  '#82B1FF',\r\n  '#448AFF',\r\n  '#2979FF',\r\n  '#2962FF',\r\n  '#E1F5FE',\r\n  '#B3E5FC',\r\n  '#81D4FA',\r\n  '#4FC3F7',\r\n  '#29B6F6',\r\n  '#03A9F4',\r\n  '#039BE5',\r\n  '#0288D1',\r\n  '#0277BD',\r\n  '#01579B',\r\n  '#80D8FF',\r\n  '#40C4FF',\r\n  '#00B0FF',\r\n  '#0091EA',\r\n  '#E0F7FA',\r\n  '#B2EBF2',\r\n  '#80DEEA',\r\n  '#4DD0E1',\r\n  '#26C6DA',\r\n  '#00BCD4',\r\n  '#00ACC1',\r\n  '#0097A7',\r\n  '#00838F',\r\n  '#006064',\r\n  '#84FFFF',\r\n  '#18FFFF',\r\n  '#00E5FF',\r\n  '#00B8D4',\r\n  '#E0F2F1',\r\n  '#B2DFDB',\r\n  '#80CBC4',\r\n  '#4DB6AC',\r\n  '#26A69A',\r\n  '#009688',\r\n  '#00897B',\r\n  '#00796B',\r\n  '#00695C',\r\n  '#004D40',\r\n  '#A7FFEB',\r\n  '#64FFDA',\r\n  '#1DE9B6',\r\n  '#00BFA5',\r\n  '#E8F5E9',\r\n  '#C8E6C9',\r\n  '#A5D6A7',\r\n  '#81C784',\r\n  '#66BB6A',\r\n  '#4CAF50',\r\n  '#43A047',\r\n  '#388E3C',\r\n  '#2E7D32',\r\n  '#1B5E20',\r\n  '#B9F6CA',\r\n  '#69F0AE',\r\n  '#00E676',\r\n  '#00C853',\r\n  '#F1F8E9',\r\n  '#DCEDC8',\r\n  '#C5E1A5',\r\n  '#AED581',\r\n  '#9CCC65',\r\n  '#8BC34A',\r\n  '#7CB342',\r\n  '#689F38',\r\n  '#558B2F',\r\n  '#33691E',\r\n  '#CCFF90',\r\n  '#B2FF59',\r\n  '#76FF03',\r\n  '#64DD17',\r\n  '#F9FBE7',\r\n  '#F0F4C3',\r\n  '#E6EE9C',\r\n  '#DCE775',\r\n  '#D4E157',\r\n  '#CDDC39',\r\n  '#C0CA33',\r\n  '#AFB42B',\r\n  '#9E9D24',\r\n  '#827717',\r\n  '#F4FF81',\r\n  '#EEFF41',\r\n  '#C6FF00',\r\n  '#AEEA00',\r\n  '#FFFDE7',\r\n  '#FFF9C4',\r\n  '#FFF59D',\r\n  '#FFF176',\r\n  '#FFEE58',\r\n  '#FFEB3B',\r\n  '#FDD835',\r\n  '#FBC02D',\r\n  '#F9A825',\r\n  '#F57F17',\r\n  '#FFFF8D',\r\n  '#FFFF00',\r\n  '#FFEA00',\r\n  '#FFD600',\r\n  '#FFF8E1',\r\n  '#FFECB3',\r\n  '#FFE082',\r\n  '#FFD54F',\r\n  '#FFCA28',\r\n  '#FFC107',\r\n  '#FFB300',\r\n  '#FFA000',\r\n  '#FF8F00',\r\n  '#FF6F00',\r\n  '#FFE57F',\r\n  '#FFD740',\r\n  '#FFC400',\r\n  '#FFAB00',\r\n  '#FFF3E0',\r\n  '#FFE0B2',\r\n  '#FFCC80',\r\n  '#FFB74D',\r\n  '#FFA726',\r\n  '#FF9800',\r\n  '#FB8C00',\r\n  '#F57C00',\r\n  '#EF6C00',\r\n  '#E65100',\r\n  '#FFD180',\r\n  '#FFAB40',\r\n  '#FF9100',\r\n  '#FF6D00',\r\n  '#FBE9E7',\r\n  '#FFCCBC',\r\n  '#FFAB91',\r\n  '#FF8A65',\r\n  '#FF7043',\r\n  '#FF5722',\r\n  '#F4511E',\r\n  '#E64A19',\r\n  '#D84315',\r\n  '#BF360C',\r\n  '#FF9E80',\r\n  '#FF6E40',\r\n  '#FF3D00',\r\n  '#DD2C00',\r\n  '#EFEBE9',\r\n  '#D7CCC8',\r\n  '#BCAAA4',\r\n  '#A1887F',\r\n  '#8D6E63',\r\n  '#795548',\r\n  '#6D4C41',\r\n  '#5D4037',\r\n  '#4E342E',\r\n  '#3E2723',\r\n  '#FAFAFA',\r\n  '#F5F5F5',\r\n  '#EEEEEE',\r\n  '#E0E0E0',\r\n  '#BDBDBD',\r\n  '#9E9E9E',\r\n  '#757575',\r\n  '#616161',\r\n  '#424242',\r\n  '#212121',\r\n  '#ECEFF1',\r\n  '#CFD8DC',\r\n  '#B0BEC5',\r\n  '#90A4AE',\r\n  '#78909C',\r\n  '#607D8B',\r\n  '#546E7A',\r\n  '#455A64',\r\n  '#37474F',\r\n  '#263238',\r\n  '#000000',\r\n  ];\r\n\r\nexport default COLORS_ARRAY","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport COLORS_ARRAY from \"./colorsArray\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport {faQuoteLeft} from '@fortawesome/free-solid-svg-icons'\n\n\nlet quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\n\nfunction App() {\n  const [quote, setQuote] = useState(\"Work is 10% what happens to me and 90% of how I react to it.\")\n  const [author, setAuthor] = useState(\"Charles Swindoll\");\n  const [randomNumber, setRandomNumber] = useState(0)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const [accentColor, setAccentColor] = useState('#282c34')\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotesArray(parsedJSON.quotes)\n    console.log(parsedJSON)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quoteDBUrl)\n  }, [quoteDBUrl])\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random())\n    setRandomNumber(randomInteger)\n    setAccentColor(COLORS_ARRAY[randomInteger])\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{ backgroundColor: accentColor }}>\n        <div id=\"quote-box\" style={{ color: accentColor }}>\n          <h2 id=\"text\">\n            <span id=\"quote-icon\"><FontAwesomeIcon icon={faQuoteLeft}/></span>{quote}\"\n        </h2>\n          <p id=\"author\">- {author}</p>\n          <div className=\"buttons\" >\n            <a id=\"tweet-quote\" style={{ backgroundColor: accentColor }} href={encodeURI(`http://www.twitter.com/intent/tweet?text=${quote} -${author}`)}><FontAwesomeIcon icon={faTwitter} /></a>\n            <button id=\"new-quote\" style={{ backgroundColor: accentColor }} onClick={() => getRandomQuote()}>Generate A Random Quote</button>\n          </div>\n\n          \n\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}